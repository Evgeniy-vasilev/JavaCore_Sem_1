<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="00e820ee-7c31-444b-aee4-798f37c0f29f" name="Changes" comment="">
      <change afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/encodings.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/Decorator.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/Main.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/Writer.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectColorInfo"><![CDATA[{
  "associatedIndex": 5
}]]></component>
  <component name="ProjectId" id="2WZs8w4t3l6LgXQb9M52AbKMnqD" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
    "git-widget-placeholder": "master",
    "last_opened_file_path": "D:/java/JavaCore/Seminar_1"
  }
}]]></component>
  <component name="RunManager" selected="Application.Main">
    <configuration name="Main (1)" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="Main" />
      <module name="Seminar_1" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="org.example.Main" />
      <module name="Seminar_1" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.example.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.Main" />
        <item itemvalue="Application.Main (1)" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="00e820ee-7c31-444b-aee4-798f37c0f29f" name="Changes" comment="" />
      <created>1696948365268</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1696948365268</updated>
    </task>
    <servers />
  </component>
  <component name="com.github.evgenys91.machinet.common.dslhistory.DslHistoryState">
    <option name="historyDtoById">
      <map>
        <entry key="457535">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/Main.java" />
                </list>
              </option>
              <option name="id" value="457535" />
              <option name="initiateTms" value="1696948555253" />
              <option name="request" value="запись в файл" />
              <option name="response" value="" />
              <option name="responseDescription" value="Sure, I can help you with that. Could you please provide more details about what you want to write to the file?" />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1696948557210" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/Main.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="66dcbf">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/Main.java" />
                </list>
              </option>
              <option name="id" value="66dcbf" />
              <option name="initiateTms" value="1696948579898" />
              <option name="request" value="запись текста в файл" />
              <option name="response" value="" />
              <option name="responseDescription" value="To write text to a file in Java, you can use the `FileWriter` class. Here's an example of how you can modify your code to write text to a file:&#10;&#10;```java&#10;package org.example;&#10;&#10;import java.io.FileWriter;&#10;import java.io.IOException;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        String text = &quot;Hello, world!&quot;;&#10;        String filePath = &quot;path/to/your/file.txt&quot;;&#10;&#10;        try {&#10;            FileWriter writer = new FileWriter(filePath);&#10;            writer.write(text);&#10;            writer.close();&#10;            System.out.println(&quot;Text written to file successfully.&quot;);&#10;        } catch (IOException e) {&#10;            System.out.println(&quot;An error occurred while writing to the file.&quot;);&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}&#10;```&#10;&#10;In this example, we create a `FileWriter` object and specify the file path where we want to write the text. We then use the `write()` method to write the text to the file. Finally, we close the writer to ensure that all the data is flushed to the file.&#10;&#10;Make sure to replace `&quot;path/to/your/file.txt&quot;` with the actual file path where you want to write the text." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1696948585810" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/Main.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="9b2520">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/Main.java" />
                </list>
              </option>
              <option name="id" value="9b2520" />
              <option name="initiateTms" value="1696948636667" />
              <option name="request" value="запись текста в файл с датой" />
              <option name="response" value="" />
              <option name="responseDescription" value="If you want to write text to a file along with the current date, you can use the `SimpleDateFormat` class to format the date and append it to the text before writing it to the file. Here's an example:&#10;&#10;```java&#10;package org.example;&#10;&#10;import java.io.FileWriter;&#10;import java.io.IOException;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        String text = &quot;Hello, world!&quot;;&#10;        String filePath = &quot;path/to/your/file.txt&quot;;&#10;&#10;        try {&#10;            FileWriter writer = new FileWriter(filePath);&#10;            String formattedText = getFormattedText(text);&#10;            writer.write(formattedText);&#10;            writer.close();&#10;            System.out.println(&quot;Text written to file successfully.&quot;);&#10;        } catch (IOException e) {&#10;            System.out.println(&quot;An error occurred while writing to the file.&quot;);&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private static String getFormattedText(String text) {&#10;        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);&#10;        String formattedDate = dateFormat.format(new Date());&#10;        return &quot;[&quot; + formattedDate + &quot;] &quot; + text;&#10;    }&#10;}&#10;```&#10;&#10;In this example, the `getFormattedText()` method is added to format the text with the current date. It uses the `SimpleDateFormat` class to format the date in the desired format (in this case, &quot;yyyy-MM-dd HH:mm:ss&quot;). The formatted date is then appended to the text before writing it to the file.&#10;&#10;Make sure to replace `&quot;path/to/your/file.txt&quot;` with the actual file path where you want to write the text." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1696948644484" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/Main.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="greeting">
          <value>
            <ChatHistoryModel>
              <option name="id" value="greeting" />
              <option name="initiateTms" value="1696948547957" />
              <option name="request" value="" />
              <option name="response" value="" />
              <option name="responseDescription" value="&#10;Hello, I am Machinet AI - context aware chat, which can help you with your daily programming routine. How can I help?" />
              <option name="responseTms" value="1696948549717" />
            </ChatHistoryModel>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>